component ParallelAssemblyType1
    % ParallelAssemblyType1:2
    % Parallel Assembly Block
    %    Model resolution: Lumped
    %    Number of cells: 6
    %
    %    MATLAB version: 9.13
    %    Simscape Battery version: 1.0
    %    Simscape code generated on: 13-Oct-2022 15:44:52

    parameters
        SOC_vec = {[0, .1, .25, .5, .75, .9, 1],'1'}; % Vector of state-of-charge values, SOC
        T_vec = {[278, 293, 313],'K'}; % Vector of temperatures, T
        V0_mat = {[3.49, 3.5, 3.51; 3.55, 3.57, 3.56; 3.62, 3.63, 3.64; 3.71, 3.71, 3.72; 3.91, 3.93, 3.94; 4.07, 4.08, 4.08; 4.19, 4.19, 4.19],'V'}; % Open-circuit voltage, V0(SOC,T)
        V_range = {[0, inf],'V'}; % Terminal voltage operating range [Min Max]
        R0_mat = {[.0117, .0085, .009; .011, .0085, .009; .0114, .0087, .0092; .0107, .0082, .0088; .0107, .0083, .0091; .0113, .0085, .0089; .0116, .0085, .0089],'Ohm'}; % Terminal resistance, R0(SOC,T)
        AH = {27,'A*hr'}; % Cell capacity, AH
        extrapolation_option = {simscape.enum.extrapolation.nearest,'1'}; % Extrapolation method for all tables
        thermal_mass = {100,'J/K'}; % Thermal mass
        CellBalancingClosedResistance = {0.01,'Ohm'}; % Cell balancing switch closed resistance
        CellBalancingOpenConductance = {1e-8,'1/Ohm'}; % Cell balancing switch open conductance
        CellBalancingThreshold = {0.5,'1'}; % Cell balancing switch operation threshold
        CellBalancingResistance = {50,'Ohm'}; % Cell balancing shunt resistance
    end

    parameters(ExternalAccess=none)
        P = 6; % Batteries in Parallel
    end

    inputs
        enableCellBalancing = {0,'1'}; % CB
    end

    nodes
        p = foundation.electrical.electrical; % +
        n = foundation.electrical.electrical; % -
    end

    variables
        iCellModel = {0,'A'}; % Cell model current (positive in)
        vCellModel = {0,'V'}; % Cell model terminal voltage
        socCellModel = {value={1,'1'},priority=priority.high}; % Cell model state of charge
        numCyclesCellModel = {value={0,'1'},priority=priority.high}; % Cell model discharge cycles
        temperatureCellModel = {value={298.15,'K'},priority=priority.high}; % Cell model temperature
        vParallelAssembly = {value={0,'V'},priority=priority.none}; % Parallel Assembly Voltage
        socParallelAssembly = {value={1,'1'},priority=priority.none}; % Parallel Assembly state of charge
    end

    equations
        assert(length(iCellModel) == 1);
        assert(length(vCellModel) == 1);
        assert(length(socCellModel) == 1);
        assert(length(numCyclesCellModel) == 1);
        assert(length(temperatureCellModel) == 1);
        assert(length(vParallelAssembly) == 1);
        assert(length(socParallelAssembly) == 1);
        vParallelAssembly == ParallelAssembly1.v;
        socParallelAssembly == ParallelAssembly1.stateOfCharge;
        ParallelAssembly1.i == iCellModel;
        ParallelAssembly1.v == vCellModel;
        ParallelAssembly1.stateOfCharge == socCellModel;
        ParallelAssembly1.num_cycles == numCyclesCellModel;
        ParallelAssembly1.cell_temperature == temperatureCellModel;
    end

    components(ExternalAccess=observe)
        ParallelAssembly1 = batteryecm.table_battery(SOC_vec = SOC_vec,...
            T_vec = T_vec,V0_mat = V0_mat,V_range = V_range,R0_mat = R0_mat*1/P,AH = AH*P,...
            extrapolation_option = extrapolation_option,thermal_mass = thermal_mass*P,...
            T_dependence = simscape.enum.tablebattery.temperature_dependence.yes,...
            thermal_port = simscape.enum.thermaleffects.model,...
            prm_age_OCV = simscape.enum.tablebattery.prm_age_OCV.OCV,...
            prm_age_capacity = simscape.enum.tablebattery.prm_age.disabled,...
            prm_age_resistance = simscape.enum.tablebattery.prm_age.disabled,...
            prm_age_modeling = simscape.enum.tablebattery.prm_age_modeling.equation,prm_dyn = simscape.enum.tablebattery.prm_dyn.off,...
            prm_dir = simscape.enum.tablebattery.prm_dir.noCurrentDirectionality,...
            prm_fade = simscape.enum.tablebattery.prm_fade.disabled,...
            prm_leak = simscape.enum.tablebattery.prm_leak.disabled,i.priority = priority.none,...
            v.priority = priority.none,stateOfCharge.priority = priority.none,...
            num_cycles.priority = priority.none,cell_temperature.priority = priority.none);
        balancingSwitch = foundation.electrical.elements.controlled_switch(R_closed = CellBalancingClosedResistance,...
            G_open = CellBalancingOpenConductance,Threshold = CellBalancingThreshold);
        balancingResistor = foundation.electrical.elements.resistor(R = CellBalancingResistance);
    end

    connections
        connect(p,ParallelAssembly1.p);
        connect(n,ParallelAssembly1.n);
        connect(ParallelAssembly1.p,balancingSwitch.p);
        connect(balancingSwitch.n,balancingResistor.p);
        connect(balancingResistor.n,ParallelAssembly1.n);
        connect(enableCellBalancing,balancingSwitch.vT);
    end

    annotations
        [p] : Side=top;
        [n] : Side=bottom;
        UILayout = [UIGroup("Main",SOC_vec,T_vec,V0_mat,V_range,R0_mat,AH,extrapolation_option),UIGroup("Thermal",thermal_mass),...
            UIGroup("Cell Balancing",CellBalancingClosedResistance,CellBalancingOpenConductance,CellBalancingThreshold,CellBalancingResistance)];
        Icon = 'parallelAssembly.svg';
    end
end